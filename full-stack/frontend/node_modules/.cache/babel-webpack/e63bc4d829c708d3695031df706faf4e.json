{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/api.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/cdk/drag-drop\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"../Services/task.service\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/select\";\nimport * as i11 from \"@angular/material/core\";\n\nfunction TaskComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"dblclick\", function TaskComponent_div_14_Template_div_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.openTaskDialog($event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r3 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"id\", task_r3.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r3.title, \" \");\n  }\n}\n\nfunction TaskComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"dblclick\", function TaskComponent_div_19_Template_div_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.openTaskDialog($event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r6 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"id\", task_r6.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r6.title, \" \");\n  }\n}\n\nfunction TaskComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵlistener(\"dblclick\", function TaskComponent_div_24_Template_div_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.openTaskDialog($event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const task_r9 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"id\", task_r9.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", task_r9.title, \" \");\n  }\n}\n\nconst _c0 = function () {\n  return [\"inpro\", \"done\"];\n};\n\nconst _c1 = function () {\n  return [\"todo\", \"done\"];\n};\n\nconst _c2 = function () {\n  return [\"todo\", \"inpro\"];\n};\n\nfunction CreateTask_mat_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const st_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", st_r1.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", st_r1.viewValue, \" \");\n  }\n}\n\nfunction ModifyTask_mat_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const st_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", st_r1.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", st_r1.viewValue, \" \");\n  }\n}\n\nexport let TaskComponent = /*#__PURE__*/(() => {\n  class TaskComponent {\n    constructor(apiService, dialog, router) {\n      this.apiService = apiService;\n      this.dialog = dialog;\n      this.router = router;\n      this.taskList = [];\n      this.todos = [];\n      this.inprogress = [];\n      this.dones = [];\n    }\n\n    ngOnInit() {\n      //this.getProjectName();\n      this.getTaskList();\n    }\n\n    getTaskList() {\n      this.apiService.getService('/task/taskList').subscribe(data => {\n        console.log('Project name list=> ', data.body);\n        this.taskList = data.body;\n        this.todos = this.taskList.filter(tl => tl.status === \"TODO\");\n        this.inprogress = this.taskList.filter(tl => tl.status === \"INPROGRESS\");\n        this.dones = this.taskList.filter(tl => tl.status === \"DONE\");\n      });\n    }\n\n    getProjectName() {\n      this.apiService.getService('/project/getProjectName').subscribe(data => {\n        console.log('Project name list=> ', data.body);\n      });\n    }\n\n    openAddDialog() {\n      const dialogRef = this.dialog.open(CreateTask, {\n        width: \"400px\"\n      });\n      dialogRef.afterClosed().subscribe(result => {});\n    }\n\n    drop(event) {\n      if (event.previousContainer === event.container) {\n        moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n      } else {\n        this.updateTaskStatusAfterDragDrop(event);\n        transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n      }\n    }\n\n    updateTaskStatusAfterDragDrop(event) {\n      let taskId = event.item.element.nativeElement.id;\n      let containerId = event.container.id; // for(let i = 0; i < this.taskList.length; i++){\n      //   if(this.taskList[i].id === taskId) {\n      //     this.task = this.taskList[i];\n      //   }\n      // }\n      //this.updateTaskStatus(this.task, containerId);\n\n      this.apiService.getService('/task/getById/' + taskId).subscribe(response => {\n        console.log(\"Task by id=>\", response.body);\n        this.updateTaskStatus(response.body, containerId);\n      });\n    }\n\n    updateTaskStatus(task, containerId) {\n      console.log('Task for drop update: ', task);\n\n      if (containerId === 'todo') {\n        task.status = 'TODO';\n      } else if (containerId === 'inpro') {\n        task.status = 'INPROGRESS';\n      } else {\n        task.status = 'DONE';\n      }\n\n      console.log('Task for final update: ', task);\n      this.apiService.putService('/task/updateTask', task).subscribe(data => {\n        if (data.status === 200) {\n          console.log(\"Task update succefully\"); // this.router.navigateByUrl('/', {skipLocationChange: true})\n          // .then(() => this.router.navigate(['/task']));\n        } else {\n          console.log(\"updated\");\n        }\n      });\n    }\n\n    openTaskDialog(event) {\n      let taskId = event.srcElement.id; // let taskId = event.item.element.nativeElement.id;\n\n      const dialogRef = this.dialog.open(ModifyTask, {\n        width: \"1040px\",\n        panelClass: 'custom-dialog-container',\n        data: taskId\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        this.getTaskList();\n      });\n    }\n\n  }\n\n  TaskComponent.ɵfac = function TaskComponent_Factory(t) {\n    return new (t || TaskComponent)(i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  TaskComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TaskComponent,\n    selectors: [[\"app-task\"]],\n    decls: 25,\n    vars: 12,\n    consts: [[2, \"min-width\", \"100%\", \"min-height\", \"400%\", \"background-image\", \"url('../assets/img/background.jpeg')\"], [1, \"page-container\"], [1, \"page-title\"], [1, \"btn\", \"btn-success\", 3, \"click\"], [1, \"kanban-board\"], [1, \"list-container\"], [\"cdkDropList\", \"\", \"id\", \"todo\", 1, \"board-list\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"class\", \"sticky-note\", \"cdkDrag\", \"\", 3, \"id\", \"dblclick\", 4, \"ngFor\", \"ngForOf\"], [\"cdkDropList\", \"\", \"id\", \"inpro\", 1, \"board-list\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"cdkDropList\", \"\", \"id\", \"done\", 1, \"board-list\", 3, \"cdkDropListData\", \"cdkDropListConnectedTo\", \"cdkDropListDropped\"], [\"cdkDrag\", \"\", 1, \"sticky-note\", 3, \"id\", \"dblclick\"]],\n    template: function TaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"h1\");\n        i0.ɵɵtext(4, \"Kanban Boards\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"br\");\n        i0.ɵɵelementStart(6, \"div\");\n        i0.ɵɵelementStart(7, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function TaskComponent_Template_button_click_7_listener() {\n          return ctx.openAddDialog();\n        });\n        i0.ɵɵtext(8, \" Create Task \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 4);\n        i0.ɵɵelementStart(10, \"div\", 5);\n        i0.ɵɵelementStart(11, \"h2\");\n        i0.ɵɵtext(12, \"To do\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 6);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function TaskComponent_Template_div_cdkDropListDropped_13_listener($event) {\n          return ctx.drop($event);\n        });\n        i0.ɵɵtemplate(14, TaskComponent_div_14_Template, 2, 2, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 5);\n        i0.ɵɵelementStart(16, \"h2\");\n        i0.ɵɵtext(17, \"In Progress\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 8);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function TaskComponent_Template_div_cdkDropListDropped_18_listener($event) {\n          return ctx.drop($event);\n        });\n        i0.ɵɵtemplate(19, TaskComponent_div_19_Template, 2, 2, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 5);\n        i0.ɵɵelementStart(21, \"h2\");\n        i0.ɵɵtext(22, \"Done\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"div\", 9);\n        i0.ɵɵlistener(\"cdkDropListDropped\", function TaskComponent_Template_div_cdkDropListDropped_23_listener($event) {\n          return ctx.drop($event);\n        });\n        i0.ɵɵtemplate(24, TaskComponent_div_24_Template, 2, 2, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.todos)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction0(9, _c0));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.todos);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.inprogress)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction0(10, _c1));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.inprogress);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"cdkDropListData\", ctx.dones)(\"cdkDropListConnectedTo\", i0.ɵɵpureFunction0(11, _c2));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.dones);\n      }\n    },\n    directives: [i4.CdkDropList, i5.NgForOf, i4.CdkDrag],\n    styles: [\".page-container[_ngcontent-%COMP%]{font-family:\\\"Open Sans\\\",sans-serif}.list-container[_ngcontent-%COMP%]{width:350px;max-width:100%;margin:0 25px 25px 0;display:inline-block;vertical-align:top}.board-list[_ngcontent-%COMP%]{padding:2px;border:solid 1px #ccc;min-height:400px;background:white;border-radius:4px;overflow:hidden;display:block}.sticky-note[_ngcontent-%COMP%]{padding:20px 10px;border:solid 1px #ccc;border-radius:4px;margin-top:2px;color:#000000de;display:flex;flex-direction:row;align-items:center;justify-content:space-between;box-sizing:border-box;cursor:move;background:white;font-size:14px}.cdk-drag-preview[_ngcontent-%COMP%]{box-sizing:border-box;border-radius:4px;box-shadow:0 5px 5px -3px #0003,0 8px 10px 1px #00000024,0 3px 14px 2px #0000001f}.cdk-drag-placeholder[_ngcontent-%COMP%]{opacity:0}.cdk-drag-animating[_ngcontent-%COMP%]{transition:transform .25s cubic-bezier(0,0,.2,1)}.sticky-note.cdk-drop-list-dragging[_ngcontent-%COMP%]   .sticky-note[_ngcontent-%COMP%]:not(.cdk-drag-placeholder){transition:transform .25s cubic-bezier(0,0,.2,1)}\"]\n  });\n  return TaskComponent;\n})();\nexport let CreateTask = /*#__PURE__*/(() => {\n  class CreateTask {\n    constructor(taskservice, dialogRef) {\n      this.taskservice = taskservice;\n      this.dialogRef = dialogRef;\n      this.statusList = [{\n        value: 'TODO',\n        viewValue: 'TODO'\n      }, {\n        value: 'INPROGRESS',\n        viewValue: 'INPROGRESS'\n      }, {\n        value: 'DONE',\n        viewValue: 'DONE'\n      }];\n    }\n\n    ngOnInit() {\n      this.task = {\n        title: null,\n        status: null,\n        description: null\n      };\n    }\n\n    saveTask(reqData, status) {\n      if (status == 'save') {\n        this.taskservice.postService('/task/createTask', reqData).subscribe(data => {\n          if (data.status === 200) {\n            console.log(\"Task created succefully.\");\n            this.dialogRef.close(); // this.route.navigate(['/task']);\n          } else {\n            console.log(\"Task created error.\");\n            this.dialogRef.close();\n          }\n        });\n      } else {\n        this.dialogRef.close();\n      }\n    }\n\n  }\n\n  CreateTask.ɵfac = function CreateTask_Factory(t) {\n    return new (t || CreateTask)(i0.ɵɵdirectiveInject(i6.TaskService), i0.ɵɵdirectiveInject(i2.MatDialogRef));\n  };\n\n  CreateTask.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateTask,\n    selectors: [[\"create_task\"]],\n    features: [i0.ɵɵProvidersFeature([TaskComponent])],\n    decls: 19,\n    vars: 4,\n    consts: [[2, \"height\", \"210px\", \"width\", \"300px\"], [1, \"col-md-12\", \"col-xl-12\", \"col-sm-12\"], [\"matInput\", \"\", \"placeholder\", \"Enter task name\", \"id\", \"title\", \"name\", \"title\", \"minlength\", \"1\", \"maxlength\", \"50\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"status\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"placeholder\", \"Enter task Description\", \"id\", \"description\", \"name\", \"description\", \"minlength\", \"1\", \"maxlength\", \"50\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"align\", \"center\"], [2, \"color\", \"green\", 3, \"click\"], [2, \"color\", \"red\", 3, \"click\"], [3, \"value\"]],\n    template: function CreateTask_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"mat-label\");\n        i0.ɵɵtext(3, \"Task Detail\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵelementStart(5, \"mat-form-field\");\n        i0.ɵɵelementStart(6, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateTask_Template_input_ngModelChange_6_listener($event) {\n          return ctx.task.title = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"mat-form-field\");\n        i0.ɵɵelementStart(8, \"mat-label\");\n        i0.ɵɵtext(9, \"Select Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-select\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateTask_Template_mat_select_ngModelChange_10_listener($event) {\n          return ctx.task.status = $event;\n        });\n        i0.ɵɵtemplate(11, CreateTask_mat_option_11_Template, 2, 2, \"mat-option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-form-field\");\n        i0.ɵɵelementStart(13, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function CreateTask_Template_input_ngModelChange_13_listener($event) {\n          return ctx.task.description = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-dialog-actions\", 6);\n        i0.ɵɵelementStart(15, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function CreateTask_Template_button_click_15_listener() {\n          return ctx.saveTask(ctx.task, \"save\");\n        });\n        i0.ɵɵtext(16, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function CreateTask_Template_button_click_17_listener() {\n          return ctx.saveTask(ctx.task, \"close\");\n        });\n        i0.ɵɵtext(18, \"Close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.task.title);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.task.status);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.statusList);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.task.description);\n      }\n    },\n    directives: [i7.ɵNgNoValidate, i7.NgControlStatusGroup, i7.NgForm, i8.MatLabel, i8.MatFormField, i9.MatInput, i7.DefaultValueAccessor, i7.MinLengthValidator, i7.MaxLengthValidator, i7.RequiredValidator, i7.NgControlStatus, i7.NgModel, i10.MatSelect, i5.NgForOf, i2.MatDialogActions, i11.MatOption],\n    encapsulation: 2\n  });\n  return CreateTask;\n})();\nexport let ModifyTask = /*#__PURE__*/(() => {\n  class ModifyTask {\n    constructor(dialogRef, apiService, data) {\n      this.dialogRef = dialogRef;\n      this.apiService = apiService;\n      this.data = data;\n      this.statusList = [{\n        value: 'TODO',\n        viewValue: 'TODO'\n      }, {\n        value: 'INPROGRESS',\n        viewValue: 'INPROGRESS'\n      }, {\n        value: 'DONE',\n        viewValue: 'DONE'\n      }];\n      this.task = {\n        title: null,\n        status: null,\n        description: null\n      };\n    }\n\n    ngOnInit() {\n      this.taskId = this.data;\n      this.apiService.getService('/task/getById/' + this.taskId).subscribe(data => {\n        this.task = data.body;\n      });\n    }\n\n    saveTask(reqData, status) {\n      if (status == 'update') {\n        this.apiService.putService('/task/updateTask', reqData).subscribe(data => {\n          if (data.status === 200) {\n            console.log(\"Task updated succefully.\");\n            this.dialogRef.close(); // this.route.navigate(['/task']);\n          } else {\n            console.log(\"Task updated error.\");\n            this.dialogRef.close();\n          }\n        });\n      } else if (status == 'delete') {\n        this.apiService.putService('/task/deleteTaskById', reqData).subscribe(data => {\n          if (data.status === 200) {\n            console.log(\"Task deleted succefully.\");\n            this.dialogRef.close(); // this.route.navigate(['/task']);\n          } else {\n            console.log(\"Task deleted error.\");\n            this.dialogRef.close();\n          }\n        });\n      } else {\n        this.dialogRef.close();\n      }\n    }\n\n  }\n\n  ModifyTask.ɵfac = function ModifyTask_Factory(t) {\n    return new (t || ModifyTask)(i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(i1.ApiService), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA, 8));\n  };\n\n  ModifyTask.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ModifyTask,\n    selectors: [[\"modify_task\"]],\n    decls: 21,\n    vars: 4,\n    consts: [[2, \"height\", \"210px\", \"width\", \"300px\"], [1, \"col-md-12\", \"col-xl-12\", \"col-sm-12\"], [\"matInput\", \"\", \"placeholder\", \"Enter task name\", \"id\", \"title\", \"name\", \"title\", \"minlength\", \"1\", \"maxlength\", \"50\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"status\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"matInput\", \"\", \"placeholder\", \"Enter task Description\", \"id\", \"description\", \"name\", \"description\", \"minlength\", \"1\", \"maxlength\", \"50\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"align\", \"center\"], [2, \"color\", \"green\", 3, \"click\"], [2, \"color\", \"red\", 3, \"click\"], [2, \"color\", \"blue\", 3, \"click\"], [3, \"value\"]],\n    template: function ModifyTask_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"mat-label\");\n        i0.ɵɵtext(3, \"Task Detail\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵelementStart(5, \"mat-form-field\");\n        i0.ɵɵelementStart(6, \"input\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function ModifyTask_Template_input_ngModelChange_6_listener($event) {\n          return ctx.task.title = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"mat-form-field\");\n        i0.ɵɵelementStart(8, \"mat-label\");\n        i0.ɵɵtext(9, \"Select Status\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"mat-select\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function ModifyTask_Template_mat_select_ngModelChange_10_listener($event) {\n          return ctx.task.status = $event;\n        });\n        i0.ɵɵtemplate(11, ModifyTask_mat_option_11_Template, 2, 2, \"mat-option\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-form-field\");\n        i0.ɵɵelementStart(13, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function ModifyTask_Template_input_ngModelChange_13_listener($event) {\n          return ctx.task.description = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-dialog-actions\", 6);\n        i0.ɵɵelementStart(15, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function ModifyTask_Template_button_click_15_listener() {\n          return ctx.saveTask(ctx.task, \"update\");\n        });\n        i0.ɵɵtext(16, \"Update\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function ModifyTask_Template_button_click_17_listener() {\n          return ctx.saveTask(ctx.task, \"delete\");\n        });\n        i0.ɵɵtext(18, \"Delete\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function ModifyTask_Template_button_click_19_listener() {\n          return ctx.saveTask(ctx.task, \"close\");\n        });\n        i0.ɵɵtext(20, \"Close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.task.title);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.task.status);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.statusList);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.task.description);\n      }\n    },\n    directives: [i7.ɵNgNoValidate, i7.NgControlStatusGroup, i7.NgForm, i8.MatLabel, i8.MatFormField, i9.MatInput, i7.DefaultValueAccessor, i7.MinLengthValidator, i7.MaxLengthValidator, i7.RequiredValidator, i7.NgControlStatus, i7.NgModel, i10.MatSelect, i5.NgForOf, i2.MatDialogActions, i11.MatOption],\n    encapsulation: 2\n  });\n  return ModifyTask;\n})();","map":null,"metadata":{},"sourceType":"module"}